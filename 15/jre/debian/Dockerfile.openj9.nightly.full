# ------------------------------------------------------------------------------
#               NOTE: THIS DOCKERFILE IS GENERATED VIA "build_latest.sh" or "update_multiarch.sh"
#
#                       PLEASE DO NOT EDIT IT DIRECTLY.
# ------------------------------------------------------------------------------
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#      https://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#

FROM debian:buster

ENV LANG='en_US.UTF-8' LANGUAGE='en_US:en' LC_ALL='en_US.UTF-8'

RUN apt-get update \
    && apt-get install -y --no-install-recommends tzdata curl ca-certificates fontconfig locales \
    && echo "en_US.UTF-8 UTF-8" >> /etc/locale.gen \
    && locale-gen en_US.UTF-8 \
    && rm -rf /var/lib/apt/lists/*

ENV JAVA_VERSION jdk15u

RUN set -eux; \
    ARCH="$(dpkg --print-architecture)"; \
    case "${ARCH}" in \
       aarch64|arm64) \
         ESUM='b994bd188c04add992cfefae434756d726234a8eac8a63b17a7da908220911fc'; \
         BINARY_URL='https://github.com/AdoptOpenJDK/openjdk15-binaries/releases/download/jdk15u-2020-10-13-05-45/OpenJDK15U-jre_aarch64_linux_openj9_2020-10-13-05-45.tar.gz'; \
         ;; \
       ppc64el|ppc64le) \
         ESUM='f108f6b46e50174d3de6447001be490af324294cc072800c723cab2a93e470aa'; \
         BINARY_URL='https://github.com/AdoptOpenJDK/openjdk15-binaries/releases/download/jdk15u-2020-10-13-05-45/OpenJDK15U-jre_ppc64le_linux_openj9_2020-10-13-05-45.tar.gz'; \
         ;; \
       s390x) \
         ESUM='583e6ebb07d18646f0ca77d4c34737df36991de7f335d01636964621b70ebbc2'; \
         BINARY_URL='https://github.com/AdoptOpenJDK/openjdk15-binaries/releases/download/jdk15u-2020-10-13-05-45/OpenJDK15U-jre_s390x_linux_openj9_2020-10-13-05-45.tar.gz'; \
         ;; \
       amd64|x86_64) \
         ESUM='f5de9d471e491bd28f1c86ad1c43d40a6f7c12fe28588d4ad5ac1875c96046e4'; \
         BINARY_URL='https://github.com/AdoptOpenJDK/openjdk15-binaries/releases/download/jdk15u-2020-10-13-05-45/OpenJDK15U-jre_x64_linux_openj9_2020-10-13-05-45.tar.gz'; \
         ;; \
       *) \
         echo "Unsupported arch: ${ARCH}"; \
         exit 1; \
         ;; \
    esac; \
    curl -LfsSo /tmp/openjdk.tar.gz ${BINARY_URL}; \
    echo "${ESUM} */tmp/openjdk.tar.gz" | sha256sum -c -; \
    mkdir -p /opt/java/openjdk; \
    cd /opt/java/openjdk; \
    tar -xf /tmp/openjdk.tar.gz --strip-components=1; \
    rm -rf /tmp/openjdk.tar.gz;

ENV JAVA_HOME=/opt/java/openjdk \
    PATH="/opt/java/openjdk/bin:$PATH"
ENV JAVA_TOOL_OPTIONS="-XX:+IgnoreUnrecognizedVMOptions -XX:+IdleTuningGcOnIdle"

# Create OpenJ9 SharedClassCache (SCC) for bootclasses to improve the java startup.
# Downloads and runs tomcat to generate SCC for bootclasses at /opt/java/.scc/openj9_system_scc
# Does a dry-run and calculates the optimal cache size and recreates the cache with the appropriate size.
# With SCC, OpenJ9 startup is improved ~50% with an increase in image size of ~14MB
# Application classes can be create a separate cache layer with this as the base for further startup improvement

# Setting shell to bash to execute a bash script
SHELL ["/bin/bash", "-c"]

RUN set -euo pipefail \
    && unset OPENJ9_JAVA_OPTIONS \
    && SCC_SIZE="50m" \
    && SCC_GEN_RUNS_COUNT=3 \
    && DOWNLOAD_PATH_TOMCAT=/tmp/tomcat \
    && INSTALL_PATH_TOMCAT=/opt/tomcat-home \
    && TOMCAT_CHECKSUM="0db27185d9fc3174f2c670f814df3dda8a008b89d1a38a5d96cbbe119767ebfb1cf0bce956b27954aee9be19c4a7b91f2579d967932207976322033a86075f98" \
    && TOMCAT_DWNLD_URL="https://archive.apache.org/dist/tomcat/tomcat-9/v9.0.35/bin/apache-tomcat-9.0.35.tar.gz" \
    \
    && mkdir -p "${DOWNLOAD_PATH_TOMCAT}" "${INSTALL_PATH_TOMCAT}" \
    && curl -LfsSo "${DOWNLOAD_PATH_TOMCAT}"/tomcat.tar.gz "${TOMCAT_DWNLD_URL}" \
    && echo "${TOMCAT_CHECKSUM} *${DOWNLOAD_PATH_TOMCAT}/tomcat.tar.gz" | sha512sum -c - \
    && tar -xf "${DOWNLOAD_PATH_TOMCAT}"/tomcat.tar.gz -C "${INSTALL_PATH_TOMCAT}" --strip-components=1 \
    && rm -rf "${DOWNLOAD_PATH_TOMCAT}" \
    \
    && java -Xshareclasses:name=dry_run_scc,cacheDir=/opt/java/.scc,bootClassesOnly,nonFatal,createLayer -Xscmx$SCC_SIZE -version \
    && export OPENJ9_JAVA_OPTIONS="-Xshareclasses:name=dry_run_scc,cacheDir=/opt/java/.scc,bootClassesOnly,nonFatal" \
    && for ((i=0; i<SCC_GEN_RUNS_COUNT; i++)) \
       do \
           "${INSTALL_PATH_TOMCAT}"/bin/startup.sh; \
           sleep 5; \
           "${INSTALL_PATH_TOMCAT}"/bin/shutdown.sh; \
           sleep 5; \
       done \
    \
    && FULL=$((java -Xshareclasses:name=dry_run_scc,cacheDir=/opt/java/.scc,printallStats 2>&1 || true) | awk '/^Cache is [0-9.]*% .*full/ {print substr($3, 1, length($3)-1)}') \
    && DST_CACHE=$(java -Xshareclasses:name=dry_run_scc,cacheDir=/opt/java/.scc,destroy 2>&1 || true) \
    && SCC_SIZE="${SCC_SIZE:0:-1}" \
    && SCC_SIZE=$(awk "BEGIN {print int($SCC_SIZE * $FULL / 100.0)}") \
    && [ "${SCC_SIZE}" -eq 0 ] && SCC_SIZE=1 || true \
    && SCC_SIZE="${SCC_SIZE}m" \
    && java -Xshareclasses:name=openj9_system_scc,cacheDir=/opt/java/.scc,bootClassesOnly,nonFatal,createLayer -Xscmx$SCC_SIZE -version \
    && unset OPENJ9_JAVA_OPTIONS \
    \
    && export OPENJ9_JAVA_OPTIONS="-Xshareclasses:name=openj9_system_scc,cacheDir=/opt/java/.scc,bootClassesOnly,nonFatal" \
    && for ((i=0; i<SCC_GEN_RUNS_COUNT; i++)) \
       do \
           "${INSTALL_PATH_TOMCAT}"/bin/startup.sh; \
           sleep 5; \
           "${INSTALL_PATH_TOMCAT}"/bin/shutdown.sh; \
           sleep 5; \
       done \
    \
    && FULL=$((java -Xshareclasses:name=openj9_system_scc,cacheDir=/opt/java/.scc,printallStats 2>&1 || true) | awk '/^Cache is [0-9.]*% .*full/ {print substr($3, 1, length($3)-1)}') \
    && echo "SCC layer is $FULL% full." \
    && rm -rf "${INSTALL_PATH_TOMCAT}" \
    && if [ -d "/opt/java/.scc" ]; then \
          chmod -R 0777 /opt/java/.scc; \
       fi \
    \
    && echo "SCC generation phase completed"

# Resetting shell back to sh
SHELL ["/bin/sh", "-c"]

ENV OPENJ9_JAVA_OPTIONS="-Xshareclasses:name=openj9_system_scc,cacheDir=/opt/java/.scc,readonly,nonFatal"

